/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package telas.Invoice;

import controller.InvoicesController;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URL;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import model.Cliente;
import model.Fornecedor;
import model.Invoices;
import model.Unidadenegocio;
import model.view.Viewconsultainvoice;
import Singleton.ConexaoSingleton;
import telas.Arquivo.FrmConsultaArquivos;
import telas.FollowUp.JTableRenderer;
import telas.FrmSalvarAquivo;
import telas.Usuarios.UsuarioLogadoBean;
import util.Formatacao;
import util.clickColunas;

/**
 *
 * @author Wolverine
 */
public class FrmConsultaInvoice extends javax.swing.JFrame implements Iinvoice{
    
    private List<Viewconsultainvoice> listaInvoice;
    private ConsultaInvoiceTableModel modelInvoice;
    private int numero;
    private UsuarioLogadoBean usuarioLogadoBean;
   
    

    /**
     * Creates new form FrmConsultaInvoice
     */
    public FrmConsultaInvoice(UsuarioLogadoBean usuarioLogadoBean) {
        initComponents();
        this.usuarioLogadoBean = usuarioLogadoBean;
        URL url = this.getClass().getResource("/imagens/logo/logotela.png");
        Image imagemTitulo = Toolkit.getDefaultToolkit().getImage(url);
        this.setIconImage(imagemTitulo);
        this.setLocationRelativeTo(null);
        carregarModelInvoice();
        this.setVisible(true);
        JTableHeader header = invoicejTable.getTableHeader();
        header.addMouseListener(new clickColunas(this));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        invoicejTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        nomeClientejTextField = new javax.swing.JTextField();
        BarradeTarefasjToolBar5 = new javax.swing.JToolBar();
        pagarjButton = new javax.swing.JButton();
        SeparadordeTarefasjSeparator = new javax.swing.JToolBar.Separator();
        imprimirjButton4 = new javax.swing.JButton();
        imprimirjButton1 = new javax.swing.JButton();
        imprimirjButton5 = new javax.swing.JButton();
        imprimirjButton3 = new javax.swing.JButton();
        FecharrjButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        invoicejTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Situação", "Nome Cliente", "Data Pagto", "Valor Pagto", "Unidade", "Produto", "Fornecedor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        invoicejTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                invoicejTableMouseClicked(evt);
            }
        });
        invoicejTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                invoicejTableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(invoicejTable);
        if (invoicejTable.getColumnModel().getColumnCount() > 0) {
            invoicejTable.getColumnModel().getColumn(0).setResizable(false);
            invoicejTable.getColumnModel().getColumn(0).setPreferredWidth(60);
            invoicejTable.getColumnModel().getColumn(1).setResizable(false);
            invoicejTable.getColumnModel().getColumn(1).setPreferredWidth(200);
            invoicejTable.getColumnModel().getColumn(2).setResizable(false);
            invoicejTable.getColumnModel().getColumn(2).setPreferredWidth(80);
            invoicejTable.getColumnModel().getColumn(3).setResizable(false);
            invoicejTable.getColumnModel().getColumn(3).setPreferredWidth(80);
            invoicejTable.getColumnModel().getColumn(4).setResizable(false);
            invoicejTable.getColumnModel().getColumn(4).setPreferredWidth(150);
            invoicejTable.getColumnModel().getColumn(5).setResizable(false);
            invoicejTable.getColumnModel().getColumn(5).setPreferredWidth(100);
            invoicejTable.getColumnModel().getColumn(6).setResizable(false);
            invoicejTable.getColumnModel().getColumn(6).setPreferredWidth(150);
        }

        jLabel1.setText("Nome do Cliente");

        nomeClientejTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nomeClientejTextFieldKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 863, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(nomeClientejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nomeClientejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        BarradeTarefasjToolBar5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        BarradeTarefasjToolBar5.setFloatable(false);
        BarradeTarefasjToolBar5.setRollover(true);

        pagarjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes/cambio.png"))); // NOI18N
        pagarjButton.setText("Pagamento");
        pagarjButton.setToolTipText("Pagamento Invoice");
        pagarjButton.setFocusable(false);
        pagarjButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pagarjButton.setMaximumSize(new java.awt.Dimension(80, 90));
        pagarjButton.setMinimumSize(new java.awt.Dimension(80, 90));
        pagarjButton.setPreferredSize(new java.awt.Dimension(80, 90));
        pagarjButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        pagarjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pagarjButtonActionPerformed(evt);
            }
        });
        BarradeTarefasjToolBar5.add(pagarjButton);
        BarradeTarefasjToolBar5.add(SeparadordeTarefasjSeparator);

        imprimirjButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes/listar.png"))); // NOI18N
        imprimirjButton4.setText("Obs Crédito");
        imprimirjButton4.setToolTipText("Exportar para Excel");
        imprimirjButton4.setFocusable(false);
        imprimirjButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        imprimirjButton4.setMaximumSize(new java.awt.Dimension(80, 90));
        imprimirjButton4.setMinimumSize(new java.awt.Dimension(80, 90));
        imprimirjButton4.setPreferredSize(new java.awt.Dimension(80, 90));
        imprimirjButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        imprimirjButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimirjButton4ActionPerformed(evt);
            }
        });
        BarradeTarefasjToolBar5.add(imprimirjButton4);

        imprimirjButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes/pesquisar.png"))); // NOI18N
        imprimirjButton1.setText("Pesquisar");
        imprimirjButton1.setToolTipText("Pesquisar Invoice");
        imprimirjButton1.setFocusable(false);
        imprimirjButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        imprimirjButton1.setMaximumSize(new java.awt.Dimension(80, 90));
        imprimirjButton1.setMinimumSize(new java.awt.Dimension(80, 90));
        imprimirjButton1.setPreferredSize(new java.awt.Dimension(80, 90));
        imprimirjButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        imprimirjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimirjButton1ActionPerformed(evt);
            }
        });
        BarradeTarefasjToolBar5.add(imprimirjButton1);

        imprimirjButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes/arquivos.png"))); // NOI18N
        imprimirjButton5.setText("Arquivo");
        imprimirjButton5.setToolTipText("Upload de Arquivo");
        imprimirjButton5.setFocusable(false);
        imprimirjButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        imprimirjButton5.setMaximumSize(new java.awt.Dimension(80, 90));
        imprimirjButton5.setMinimumSize(new java.awt.Dimension(80, 90));
        imprimirjButton5.setPreferredSize(new java.awt.Dimension(80, 90));
        imprimirjButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        imprimirjButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimirjButton5ActionPerformed(evt);
            }
        });
        BarradeTarefasjToolBar5.add(imprimirjButton5);

        imprimirjButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes/exportar.png"))); // NOI18N
        imprimirjButton3.setText("Exportar");
        imprimirjButton3.setToolTipText("Exportar para Excel");
        imprimirjButton3.setFocusable(false);
        imprimirjButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        imprimirjButton3.setMaximumSize(new java.awt.Dimension(80, 90));
        imprimirjButton3.setMinimumSize(new java.awt.Dimension(80, 90));
        imprimirjButton3.setPreferredSize(new java.awt.Dimension(80, 90));
        imprimirjButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        imprimirjButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimirjButton3ActionPerformed(evt);
            }
        });
        BarradeTarefasjToolBar5.add(imprimirjButton3);

        FecharrjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes/fechar.png"))); // NOI18N
        FecharrjButton.setText("Fechar");
        FecharrjButton.setToolTipText("Fechar");
        FecharrjButton.setFocusable(false);
        FecharrjButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        FecharrjButton.setMaximumSize(new java.awt.Dimension(80, 90));
        FecharrjButton.setMinimumSize(new java.awt.Dimension(80, 90));
        FecharrjButton.setPreferredSize(new java.awt.Dimension(80, 90));
        FecharrjButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        FecharrjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FecharrjButtonActionPerformed(evt);
            }
        });
        BarradeTarefasjToolBar5.add(FecharrjButton);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(190, 190, 190)
                    .addComponent(BarradeTarefasjToolBar5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(227, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(111, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(423, Short.MAX_VALUE)
                    .addComponent(BarradeTarefasjToolBar5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pagarjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pagarjButtonActionPerformed
         if (usuarioLogadoBean.getAcesso().getInvoicePagar() == 1) {
            int linha = invoicejTable.getSelectedRow();
            if (linha >= 0) {
                if (listaInvoice.get(linha).getValorPago()>0){
                     boolean resultado = false;
                     resultado = JOptionPane.showConfirmDialog(null, "Pagamento já efetuado. Alterar Pagamento?", "Confirmar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == 0;
                     if (resultado){
                         new FrmCadastrarInvoice(listaInvoice.get(linha));
                     }
                }else new FrmCadastrarInvoice(listaInvoice.get(linha));
            }else JOptionPane.showMessageDialog(rootPane, "Selecione uma Invoice");
        } else {
            JOptionPane.showMessageDialog(rootPane, "Acesso Negado");
        }
        
    }//GEN-LAST:event_pagarjButtonActionPerformed

    private void imprimirjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imprimirjButton1ActionPerformed
        new FrmPesquisarInvoice(usuarioLogadoBean, this);
    }//GEN-LAST:event_imprimirjButton1ActionPerformed

    private void imprimirjButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imprimirjButton3ActionPerformed
        new FrmSalvarAquivo(this);
    }//GEN-LAST:event_imprimirjButton3ActionPerformed

    private void FecharrjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FecharrjButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_FecharrjButtonActionPerformed

    private void invoicejTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_invoicejTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_invoicejTableMouseClicked

    private void imprimirjButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imprimirjButton4ActionPerformed
        int linha = invoicejTable.getSelectedRow();
        if (linha>=0){
            new FrmObsCredito(listaInvoice.get(linha).getObscredito());
        }else JOptionPane.showMessageDialog(rootPane, "Selecione uma invoice");
    }//GEN-LAST:event_imprimirjButton4ActionPerformed

    private void nomeClientejTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomeClientejTextFieldKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            carregarModelInvoice();
        }
    }//GEN-LAST:event_nomeClientejTextFieldKeyPressed

    private void imprimirjButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imprimirjButton5ActionPerformed
        if (usuarioLogadoBean.getAcesso().getUploadArquivo() == 1) {
            int linha = invoicejTable.getSelectedRow();
            if (linha >= 0) {
                new FrmConsultaArquivos(usuarioLogadoBean, listaInvoice.get(linha).getIdvendas(), listaInvoice.get(linha).getNomeCliente(), listaInvoice.get(linha).getIdunidadeNegocio());
            } else {
                JOptionPane.showMessageDialog(rootPane, "Selecione um cliente");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Acesso Negado");
        }
    }//GEN-LAST:event_imprimirjButton5ActionPerformed

    private void invoicejTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_invoicejTableKeyPressed
        if (evt.getKeyCode()==KeyEvent.VK_F1){
            int linha = invoicejTable.getSelectedRow();
            if (linha>=0){
                InvoicesController invoicesController = new InvoicesController();
                Invoices invoice = invoicesController.consultar(listaInvoice.get(linha).getIdinvoices());
                if (invoice!=null){
                    Date data = Formatacao.ConvercaoStringData("01/01/1900");
                    invoice.setDataPagamentoInvoice(data);
                    invoice.setValorPago(0.01f);
                    invoicesController.salvar(invoice);
                }
            }
        }
    }//GEN-LAST:event_invoicejTableKeyPressed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar BarradeTarefasjToolBar5;
    private javax.swing.JButton FecharrjButton;
    private javax.swing.JToolBar.Separator SeparadordeTarefasjSeparator;
    private javax.swing.JButton imprimirjButton1;
    private javax.swing.JButton imprimirjButton3;
    private javax.swing.JButton imprimirjButton4;
    private javax.swing.JButton imprimirjButton5;
    private javax.swing.JTable invoicejTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nomeClientejTextField;
    private javax.swing.JButton pagarjButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setNumeroColuna(int numero) {
        this.numero = numero;
        carregarModelInvoice();
    }
    
    public void carregarModelInvoice(){
        try {
            ConexaoSingleton.desconectar();
        } catch (SQLException ex) {
            Logger.getLogger(FrmConsultaInvoice.class.getName()).log(Level.SEVERE, null, ex);
        }
        String sql=null;
        String order = null;
        if (sql == null){
            sql = "Select i from Viewconsultainvoice i where i.valorPago=0 and i.nomeCliente like '%" + nomeClientejTextField.getText() + "%' ";
        }
        if (numero==1){
            order = "  order by i.nomeCliente";
        }else if (numero==4){
             order = " order by i.nomeFantasia";
        }else if (numero==5){
             order = " order by i.descricao";
        }else if (numero==6){
            order = " order by i.nomeFornecedor";
        }
        if (order!=null){
            sql = sql + order;
        }
        InvoicesController invoicesController = new InvoicesController();
        listaInvoice = invoicesController.listar(sql);
        if (listaInvoice==null){
            listaInvoice = new ArrayList<Viewconsultainvoice>();
        }
        modelInvoice = new ConsultaInvoiceTableModel(listaInvoice);
        invoicejTable.setModel(modelInvoice);
        TableColumnModel ColumnModel = invoicejTable.getColumnModel();  
        JTableRenderer renderer = new JTableRenderer();  
        DefaultTableCellRenderer rendererValor = new DefaultTableCellRenderer();
        rendererValor.setHorizontalAlignment(SwingConstants.RIGHT);
         invoicejTable.getColumnModel().getColumn(0).setCellRenderer(renderer);
        invoicejTable.getColumnModel().getColumn(0).setPreferredWidth(80);
        invoicejTable.getColumnModel().getColumn(1).setPreferredWidth(80);
        invoicejTable.getColumnModel().getColumn(2).setPreferredWidth(200);
        invoicejTable.getColumnModel().getColumn(3).setPreferredWidth(80);
        invoicejTable.getColumnModel().getColumn(4).setCellRenderer(rendererValor);
        invoicejTable.getColumnModel().getColumn(4).setPreferredWidth(80);
        invoicejTable.getColumnModel().getColumn(5).setCellRenderer(rendererValor);
        invoicejTable.getColumnModel().getColumn(5).setPreferredWidth(80);
        invoicejTable.getColumnModel().getColumn(6).setPreferredWidth(80);
        invoicejTable.getColumnModel().getColumn(7).setPreferredWidth(150);
        invoicejTable.getColumnModel().getColumn(8).setPreferredWidth(80);
        invoicejTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF); 
        invoicejTable.repaint();
    }

    @Override
    public void setCliente(Cliente cliente) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setUnidade(Unidadenegocio unidade) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setEscola(Fornecedor fornecedor) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setFiltrarControleCurso(Cliente cliente, Fornecedor fornecedor, Unidadenegocio unidade, Date dataPrevistaInicial, Date dataPrevistaFinal, Date dataPagtoInicial, Date dataPagtoFinal) {
        String sql = null;
        boolean condicao = false;
        sql = "Select v from Viewconsultainvoice v where ";
        if (cliente!=null){
            sql = sql + " v.idcliente=" + cliente.getIdcliente() + " ";
            condicao= true;
        }        
        if (fornecedor!=null){
            if (condicao){
                sql = sql + " and v.idfornecedor=" + fornecedor.getIdfornecedor() + " ";
            }else {
                sql = sql + " v.idfornecedor=" + fornecedor.getIdfornecedor() + " ";
                condicao = true;
            }
        }
        if (unidade!=null){
            if (condicao){
                sql = sql + " and v.idunidadenegocio=" + unidade.getIdunidadeNegocio();
            }else {
                sql = sql + " v.idunidadenegocio=" + unidade.getIdunidadeNegocio();
                condicao = true;
            }
        }
        if (dataPrevistaInicial!=null){
            if (condicao){
                sql = sql + " and v.dataPrevistaPagamento>='" + Formatacao.ConvercaoDataSql(dataPrevistaInicial) + 
                    "' and  v.dataPrevistaPagamento<='" + Formatacao.ConvercaoDataSql(dataPrevistaFinal) + "' ";
            }else {
                sql = sql + " v.dataPrevistaPagamento>='" + Formatacao.ConvercaoDataSql(dataPrevistaInicial) + 
                    "' and  v.dataPrevistaPagamento<='" + Formatacao.ConvercaoDataSql(dataPrevistaFinal) + "' ";
                condicao = true;
            }
            
        }
        if (dataPagtoInicial!=null){
            if (condicao){
                sql = sql + " and v.dataPagamentoInvoice>='" + Formatacao.ConvercaoDataSql(dataPagtoInicial) + 
                    "' and  v.dataPagamentoInvoice<='" + Formatacao.ConvercaoDataSql(dataPagtoFinal) + "' ";
            }else {
                sql = sql + "  v.dataPagamentoInvoice>='" + Formatacao.ConvercaoDataSql(dataPagtoInicial) + 
                    "' and  v.dataPagamentoInvoice<='" + Formatacao.ConvercaoDataSql(dataPagtoFinal) + "' ";
                condicao=true;
            }
            
        }
        sql = sql + " order by v.dataPrevistaPagamento";
        InvoicesController invoicesController = new InvoicesController();
        listaInvoice = invoicesController.listar(sql);
        if (listaInvoice==null){
            listaInvoice = new ArrayList<Viewconsultainvoice>();
        }
        modelInvoice = new ConsultaInvoiceTableModel(listaInvoice);
        invoicejTable.setModel(modelInvoice);
        TableColumnModel ColumnModel = invoicejTable.getColumnModel();  
        JTableRenderer renderer = new JTableRenderer();  
        DefaultTableCellRenderer rendererValor = new DefaultTableCellRenderer();
        rendererValor.setHorizontalAlignment(SwingConstants.RIGHT);
        invoicejTable.getColumnModel().getColumn(0).setCellRenderer(renderer);
        invoicejTable.getColumnModel().getColumn(0).setPreferredWidth(80);
        invoicejTable.getColumnModel().getColumn(1).setPreferredWidth(80);
        invoicejTable.getColumnModel().getColumn(2).setPreferredWidth(200);
        invoicejTable.getColumnModel().getColumn(3).setPreferredWidth(80);
        invoicejTable.getColumnModel().getColumn(4).setCellRenderer(rendererValor);
        invoicejTable.getColumnModel().getColumn(4).setPreferredWidth(80);
        invoicejTable.getColumnModel().getColumn(5).setPreferredWidth(150);
        invoicejTable.getColumnModel().getColumn(6).setPreferredWidth(100);
        invoicejTable.getColumnModel().getColumn(7).setPreferredWidth(150);
        invoicejTable.getColumnModel().getColumn(8).setPreferredWidth(80);
        
        invoicejTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF); 
        invoicejTable.repaint();
    }

    @Override
    public void cancelarFiltroCurso() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void exportarExcel(String caminho, String nomeArquivo) {
        String localIni = System.getProperty("user.dir");
        localIni = localIni + "/systm.properties";
        File file = new File(localIni);
        Properties props = new Properties();
        FileInputStream fis = null;
        try {
            fis = new FileInputStream(file);
            //lê os dados que estão no arquivo
            props.load(fis);
            fis.close();
        } catch (IOException ex) {
            Logger.getLogger(ConexaoSingleton.class.getName()).log(Level.SEVERE, null, ex);
        }
        String banco = props.getProperty("banco");
        String local = props.getProperty("local");
        String senha = props.getProperty("senha");
        String usuario = props.getProperty("usuario");
        String porta = props.getProperty("porta");
        InvoicesController invoicesController = new InvoicesController();
        invoicesController.ExportarExcel(nomeArquivo, local, porta, senha, banco, usuario, caminho, usuarioLogadoBean.getUnidadeNegocio().getIdunidadeNegocio());
    }

    @Override
    public void setModel() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
