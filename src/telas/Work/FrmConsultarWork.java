/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package telas.Work;

import controller.FormaPagamentoController;
import controller.InvoicesController;
import controller.OrcamentoController;
import controller.ParcelamentoPagamentoController;
import controller.SeguroViagemController;
import controller.VendasController;
import controller.VistosController;
import controller.WorkTravelController;
import java.awt.Image;
import java.awt.Toolkit;
import java.net.URL;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumnModel;
import model.Cambio;
import model.Cliente;
import model.Controlework;
import model.Formapagamento;
import model.Invoices;
import model.Orcamento;
import model.Orcamentoprodutosorcamento;
import model.Parcelamentopagamento;
import model.Seguroviagem;
import model.Unidadenegocio;
import model.Usuario;
import model.Vendas;
import model.Vistos;
import model.Worktravel;
import model.view.Viewvendasworktravel;
import Singleton.ConexaoSingleton;
import telas.Cancelamento.FrmCancelamento;
import telas.ContasReceber.FrmConsultaContasReceber;
import telas.Cursos.FrmConsultarCursos;
import telas.FollowUp.JTableRenderer;
import telas.FrmObsTM;
import telas.PesquisaProdutos.FrmPesquisarProdutos;
import telas.Usuarios.UsuarioLogadoBean;
import util.Formatacao;
import util.relatoriosJasper;

/**
 *
 * @author Wolverine
 */
public class FrmConsultarWork extends javax.swing.JFrame implements IConsultaWork{
    
    private List<Viewvendasworktravel> listaVendas;
    private ConsultaVendasTableModel modelVendas;
    private UsuarioLogadoBean usuarioLogadoBean;
    List<Cambio> listaCambio;
    private int linha;

    /**
     * Creates new form FrmConsultarCursos
     */
    public FrmConsultarWork(UsuarioLogadoBean usuarioLogadoBean, List<Cambio> listaCambio) {
        this.listaCambio = listaCambio;
        this.usuarioLogadoBean = usuarioLogadoBean;
        initComponents();
        URL url = this.getClass().getResource("/imagens/logo/logotela.png");
        Image imagemTitulo = Toolkit.getDefaultToolkit().getImage(url);
        this.setIconImage(imagemTitulo);
        this.setLocationRelativeTo(null);
        carregarModelVendas();
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imprimirjButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        vendasCursojTable = new javax.swing.JTable();
        BarradeTarefasjToolBar3 = new javax.swing.JToolBar();
        AdicionarjButton3 = new javax.swing.JButton();
        EditarjButton = new javax.swing.JButton();
        excluirjButton = new javax.swing.JButton();
        SeparadordeTarefasjSeparator = new javax.swing.JToolBar.Separator();
        imprimirjButton = new javax.swing.JButton();
        imprimirjButton5 = new javax.swing.JButton();
        imprimirjButton2 = new javax.swing.JButton();
        imprimirjButton3 = new javax.swing.JButton();
        imprimirjButton4 = new javax.swing.JButton();
        FecharrjButton = new javax.swing.JButton();
        numeroFichasjLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        nomeClientejTextField = new javax.swing.JTextField();

        imprimirjButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes/imprimir.png"))); // NOI18N
        imprimirjButton1.setText("Pesquisar");
        imprimirjButton1.setToolTipText("Pesquisar Ficha Work and Travel");
        imprimirjButton1.setFocusable(false);
        imprimirjButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        imprimirjButton1.setMaximumSize(new java.awt.Dimension(80, 90));
        imprimirjButton1.setMinimumSize(new java.awt.Dimension(80, 90));
        imprimirjButton1.setPreferredSize(new java.awt.Dimension(80, 90));
        imprimirjButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        imprimirjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimirjButton1ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Consulta Fichas de Work and Travel");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        vendasCursojTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Cliente", "Data Inscrição", "Curso", "Unidade", "Agente"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        vendasCursojTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vendasCursojTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(vendasCursojTable);
        if (vendasCursojTable.getColumnModel().getColumnCount() > 0) {
            vendasCursojTable.getColumnModel().getColumn(0).setResizable(false);
            vendasCursojTable.getColumnModel().getColumn(0).setPreferredWidth(200);
            vendasCursojTable.getColumnModel().getColumn(1).setResizable(false);
            vendasCursojTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            vendasCursojTable.getColumnModel().getColumn(2).setResizable(false);
            vendasCursojTable.getColumnModel().getColumn(2).setPreferredWidth(200);
            vendasCursojTable.getColumnModel().getColumn(3).setResizable(false);
            vendasCursojTable.getColumnModel().getColumn(3).setPreferredWidth(200);
            vendasCursojTable.getColumnModel().getColumn(4).setResizable(false);
            vendasCursojTable.getColumnModel().getColumn(4).setPreferredWidth(100);
        }

        BarradeTarefasjToolBar3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        BarradeTarefasjToolBar3.setFloatable(false);
        BarradeTarefasjToolBar3.setRollover(true);

        AdicionarjButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes/adicionar.png"))); // NOI18N
        AdicionarjButton3.setText("Nova");
        AdicionarjButton3.setToolTipText("Nova Ficha Work and Travel");
        AdicionarjButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        AdicionarjButton3.setMaximumSize(new java.awt.Dimension(80, 90));
        AdicionarjButton3.setMinimumSize(new java.awt.Dimension(80, 90));
        AdicionarjButton3.setName(""); // NOI18N
        AdicionarjButton3.setPreferredSize(new java.awt.Dimension(80, 90));
        AdicionarjButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        AdicionarjButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdicionarjButton3ActionPerformed(evt);
            }
        });
        BarradeTarefasjToolBar3.add(AdicionarjButton3);

        EditarjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes/editar.png"))); // NOI18N
        EditarjButton.setText("Editar");
        EditarjButton.setToolTipText("Editar Ficha Work and Travel");
        EditarjButton.setEnabled(false);
        EditarjButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        EditarjButton.setMaximumSize(new java.awt.Dimension(80, 90));
        EditarjButton.setMinimumSize(new java.awt.Dimension(80, 90));
        EditarjButton.setPreferredSize(new java.awt.Dimension(80, 90));
        EditarjButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        EditarjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditarjButtonActionPerformed(evt);
            }
        });
        BarradeTarefasjToolBar3.add(EditarjButton);

        excluirjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes/excluir.png"))); // NOI18N
        excluirjButton.setText("Cancelar");
        excluirjButton.setToolTipText("Cancelar Ficha Work and Travel");
        excluirjButton.setEnabled(false);
        excluirjButton.setFocusable(false);
        excluirjButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        excluirjButton.setMaximumSize(new java.awt.Dimension(80, 90));
        excluirjButton.setMinimumSize(new java.awt.Dimension(80, 90));
        excluirjButton.setPreferredSize(new java.awt.Dimension(80, 90));
        excluirjButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        excluirjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirjButtonActionPerformed(evt);
            }
        });
        BarradeTarefasjToolBar3.add(excluirjButton);
        BarradeTarefasjToolBar3.add(SeparadordeTarefasjSeparator);

        imprimirjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes/imprimir.png"))); // NOI18N
        imprimirjButton.setText("Imprimir");
        imprimirjButton.setToolTipText("Imprimir Documentos");
        imprimirjButton.setEnabled(false);
        imprimirjButton.setFocusable(false);
        imprimirjButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        imprimirjButton.setMaximumSize(new java.awt.Dimension(80, 90));
        imprimirjButton.setMinimumSize(new java.awt.Dimension(80, 90));
        imprimirjButton.setPreferredSize(new java.awt.Dimension(80, 90));
        imprimirjButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        imprimirjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimirjButtonActionPerformed(evt);
            }
        });
        BarradeTarefasjToolBar3.add(imprimirjButton);

        imprimirjButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes/cambio.png"))); // NOI18N
        imprimirjButton5.setText("Boleto");
        imprimirjButton5.setToolTipText("Gerar Boleto");
        imprimirjButton5.setFocusable(false);
        imprimirjButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        imprimirjButton5.setMaximumSize(new java.awt.Dimension(80, 90));
        imprimirjButton5.setMinimumSize(new java.awt.Dimension(80, 90));
        imprimirjButton5.setPreferredSize(new java.awt.Dimension(80, 90));
        imprimirjButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        imprimirjButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimirjButton5ActionPerformed(evt);
            }
        });
        BarradeTarefasjToolBar3.add(imprimirjButton5);

        imprimirjButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes/pesquisar.png"))); // NOI18N
        imprimirjButton2.setText("Pesquisar");
        imprimirjButton2.setToolTipText("Pesquisar Ficha Work and Travel");
        imprimirjButton2.setFocusable(false);
        imprimirjButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        imprimirjButton2.setMaximumSize(new java.awt.Dimension(80, 90));
        imprimirjButton2.setMinimumSize(new java.awt.Dimension(80, 90));
        imprimirjButton2.setPreferredSize(new java.awt.Dimension(80, 90));
        imprimirjButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        imprimirjButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimirjButton2ActionPerformed(evt);
            }
        });
        BarradeTarefasjToolBar3.add(imprimirjButton2);

        imprimirjButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes/email.jpg"))); // NOI18N
        imprimirjButton3.setText("E-mail");
        imprimirjButton3.setToolTipText("Enviar E-mail");
        imprimirjButton3.setFocusable(false);
        imprimirjButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        imprimirjButton3.setMaximumSize(new java.awt.Dimension(80, 90));
        imprimirjButton3.setMinimumSize(new java.awt.Dimension(80, 90));
        imprimirjButton3.setPreferredSize(new java.awt.Dimension(80, 90));
        imprimirjButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        imprimirjButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimirjButton3ActionPerformed(evt);
            }
        });
        BarradeTarefasjToolBar3.add(imprimirjButton3);

        imprimirjButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes/bt_systm_obstm.png"))); // NOI18N
        imprimirjButton4.setText("Obs TM");
        imprimirjButton4.setToolTipText("Pesquisar Ficha de Curso");
        imprimirjButton4.setFocusable(false);
        imprimirjButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        imprimirjButton4.setMaximumSize(new java.awt.Dimension(80, 90));
        imprimirjButton4.setMinimumSize(new java.awt.Dimension(80, 90));
        imprimirjButton4.setPreferredSize(new java.awt.Dimension(80, 90));
        imprimirjButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        imprimirjButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimirjButton4ActionPerformed(evt);
            }
        });
        BarradeTarefasjToolBar3.add(imprimirjButton4);

        FecharrjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes/fechar.png"))); // NOI18N
        FecharrjButton.setText("Fechar");
        FecharrjButton.setToolTipText("Fechar");
        FecharrjButton.setFocusable(false);
        FecharrjButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        FecharrjButton.setMaximumSize(new java.awt.Dimension(80, 90));
        FecharrjButton.setMinimumSize(new java.awt.Dimension(80, 90));
        FecharrjButton.setPreferredSize(new java.awt.Dimension(80, 90));
        FecharrjButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        FecharrjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FecharrjButtonActionPerformed(evt);
            }
        });
        BarradeTarefasjToolBar3.add(FecharrjButton);

        numeroFichasjLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        numeroFichasjLabel.setForeground(new java.awt.Color(35, 135, 112));
        numeroFichasjLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        numeroFichasjLabel.setText("No. Fichas: 00");

        jLabel1.setText("Nome do Cliente:");

        nomeClientejTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nomeClientejTextFieldKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 805, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(nomeClientejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(numeroFichasjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BarradeTarefasjToolBar3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numeroFichasjLabel)
                    .addComponent(nomeClientejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BarradeTarefasjToolBar3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AdicionarjButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdicionarjButton3ActionPerformed
        if (usuarioLogadoBean.getAcesso().getLadiesAdicionar()==1){
            if (listaCambio!=null){
                new FrmFichaWork(linha, usuarioLogadoBean, this, listaCambio.get(0).getData());
            }else {
                JOptionPane.showMessageDialog(rootPane, "Cambio do dia ainda não liberado");
            }
        }else JOptionPane.showMessageDialog(rootPane,"Acesso Negado");
        
    }//GEN-LAST:event_AdicionarjButton3ActionPerformed

    private void EditarjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditarjButtonActionPerformed
        if (usuarioLogadoBean.getAcesso().getLadiesEditar() == 1) {
            int linha = vendasCursojTable.getSelectedRow();
            if (linha >= 0) {
                new FrmFichaWork(listaVendas.get(linha).getIdVendas(), usuarioLogadoBean, this, listaCambio.get(0).getData());
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Acesso Negado");
        }
    }//GEN-LAST:event_EditarjButtonActionPerformed

    private void excluirjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirjButtonActionPerformed
        if (usuarioLogadoBean.getAcesso().getLadiesExcluir() == 1) {
            int linha = vendasCursojTable.getSelectedRow();
            if (linha >= 0) {
                boolean resultado = JOptionPane.showConfirmDialog(null, "Confirma Cancelamento?", "Cancelar", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == 0;
                if (resultado) {
                    int idCliente = listaVendas.get(linha).getIdcliente();
                    int idvenda = listaVendas.get(linha).getIdVendas();
                    String tipo = listaVendas.get(linha).getTipo();
                    String motivo = JOptionPane.showInputDialog("Motivo do Cancelamento");
                    CancelarVenda(listaVendas.get(linha).getIdVendas(), listaVendas.get(linha).getNomeCliente(), Formatacao.ConvercaoDataPadrao(listaVendas.get(linha).getDataInicioPretendida01()), motivo);
                    JOptionPane.showMessageDialog(rootPane, "Ficha de Work and Travel Cancelada");
                    new FrmCancelamento(usuarioLogadoBean, idvenda, idCliente, tipo);
                    carregarModelVendas();
                }
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Acesso Negado");
        }
    }//GEN-LAST:event_excluirjButtonActionPerformed

    private void imprimirjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imprimirjButtonActionPerformed
        linha = vendasCursojTable.getSelectedRow();
        if (linha >= 0) {
            new FrmEscolherRelatorios(this, true, this);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Selecione uma ficha");
        }
    }//GEN-LAST:event_imprimirjButtonActionPerformed

    private void vendasCursojTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vendasCursojTableMouseClicked
        EditarjButton.setEnabled(true);
        excluirjButton.setEnabled(true);
        imprimirjButton.setEnabled(true);
    }//GEN-LAST:event_vendasCursojTableMouseClicked

    private void FecharrjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FecharrjButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_FecharrjButtonActionPerformed

    private void imprimirjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imprimirjButton1ActionPerformed
        new FrmPesquisarProdutos(this, usuarioLogadoBean);
    }//GEN-LAST:event_imprimirjButton1ActionPerformed

    private void imprimirjButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imprimirjButton2ActionPerformed
        new FrmPesquisarProdutos(this, usuarioLogadoBean);
    }//GEN-LAST:event_imprimirjButton2ActionPerformed

    private void imprimirjButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imprimirjButton3ActionPerformed
        int linha = vendasCursojTable.getSelectedRow();
        if (linha>=0){
            new FrmEnvioEmail(listaVendas.get(linha).getIdVendas(), usuarioLogadoBean);
        }
    }//GEN-LAST:event_imprimirjButton3ActionPerformed

    private void nomeClientejTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nomeClientejTextFieldKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            carregarModelVendas();
        }
        if (evt.getKeyCode() == evt.VK_F1) {
            WorkTravelController workTravelController = new WorkTravelController();
            for (int i = 0; i < listaVendas.size(); i++) {
                Controlework controle = workTravelController.consultarControleWork(listaVendas.get(i).getIdVendas());
                if (controle == null) {
                    controle = new Controlework();
                    controle.setVendas(listaVendas.get(i).getIdVendas());
                    controle.setJobGuarante("Não");
                    controle.setDataInicioJobOffer("Não");
                    controle.setDataTerminoJobOffer("Não");
                    controle.setEmailListaDocoumentos("Não");
                    controle.setFichaContratoOriginal("Não");
                    controle.setInformativoOriginal("Não");
                    controle.setAtestadoOriginal("Não");
                    controle.setCopiaPPTColorida("Não");
                    controle.setCopiaRGCPF("Não");
                    controle.setFotoDS("Nào");
                    controle.setDs160("Não");
                    controle.setVc("Não");
                    controle.setCartaoApresentacao("Não");
                    controle.setCartaoRecomendacao("Não");
                    controle.setAtestado2SMEOriginal("Não");
                    controle.setAtestadoSaude("Não");
                    controle.setAntecedentesCrimianis("Não");
                    controle.setSleeptestecorrigido("Não");
                    controle.setSkype(" ");
                    controle.setNumeroPassaporte(" ");
                    controle.setStatusPrograma(" ");
                    controle.setSponsor(" ");
                    controle.setCidadeSponsor(" ");
                    controle.setEmpregador(" ");
                    controle.setStatusProcesso(" ");
                    controle.setObservacoes(" ");
                    controle.setFinalizado("Processo");
                    controle.setSituacao("Processo");
                    controle = workTravelController.salvar(controle);
                    Invoices invoice = new Invoices();
                    invoice.setCambioPagamento(0.0f);
                    invoice.setGanhoCambio(0.0f);
                    invoice.setValorPago(0.0f);
                    invoice.setVendas(listaVendas.get(linha).getIdVendas());
                    invoice.setControle(controle.getIdcontroleWork());
                    invoice.setProdutos(10);
                    invoice.setGanhoperda(0.0f);
                    invoice.setValorPagamentoInvoice(0.0f);
                    invoice.setValorPrevistoInvoice(0.0f);
                    invoice.setValorcredito(0.0f);
                    invoice.setObscredito("");
                    InvoicesController invoicesController = new InvoicesController();
                    invoicesController.salvar(invoice);
                }
            }
            JOptionPane.showMessageDialog(rootPane, "TErminou");
        }
    }//GEN-LAST:event_nomeClientejTextFieldKeyPressed

    private void imprimirjButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imprimirjButton4ActionPerformed
        int linha = vendasCursojTable.getSelectedRow();
        if (linha>=0){
            new FrmObsTM(listaVendas.get(linha).getObstm());
        }
    }//GEN-LAST:event_imprimirjButton4ActionPerformed

    private void imprimirjButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imprimirjButton5ActionPerformed
        int linha = vendasCursojTable.getSelectedRow();
        if (linha>=0){
            new FrmConsultaContasReceber(listaVendas.get(linha).getIdVendas(), usuarioLogadoBean);
        }else JOptionPane.showMessageDialog(rootPane, "Selecione uma ficha.");

    }//GEN-LAST:event_imprimirjButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AdicionarjButton3;
    private javax.swing.JToolBar BarradeTarefasjToolBar3;
    private javax.swing.JButton EditarjButton;
    private javax.swing.JButton FecharrjButton;
    private javax.swing.JToolBar.Separator SeparadordeTarefasjSeparator;
    private javax.swing.JButton excluirjButton;
    private javax.swing.JButton imprimirjButton;
    private javax.swing.JButton imprimirjButton1;
    private javax.swing.JButton imprimirjButton2;
    private javax.swing.JButton imprimirjButton3;
    private javax.swing.JButton imprimirjButton4;
    private javax.swing.JButton imprimirjButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nomeClientejTextField;
    private javax.swing.JLabel numeroFichasjLabel;
    private javax.swing.JTable vendasCursojTable;
    // End of variables declaration//GEN-END:variables
    public void carregarModelVendas(){
        try {
            ConexaoSingleton.desconectar();
        } catch (SQLException ex) {
            Logger.getLogger(FrmConsultarCursos.class.getName()).log(Level.SEVERE, null, ex);
        }
        String sql = null;
         if (usuarioLogadoBean.getUsuario().getTipo().equalsIgnoreCase("Gerencial")){
            sql = "Select v from Viewvendasworktravel v where v.nomeCliente like '%" + nomeClientejTextField.getText() + "%' and v.situacao<>'Cancelada' order by v.dataVenda";
        }else {
            sql = "Select v from Viewvendasworktravel v where v.idunidadeNegocio=" + usuarioLogadoBean.getUnidadeNegocio().getIdunidadeNegocio() +  
                    " and v.nomeCliente like '%" + nomeClientejTextField.getText() + "%' and v.situacao<>'Cancelada' order by v.dataVenda";
        }
        WorkTravelController workTravelController = new WorkTravelController();
        listaVendas = workTravelController.listaViewVendasWorktravel(sql);
        if (listaVendas==null){
            listaVendas = new ArrayList<Viewvendasworktravel>();
        }
        modelVendas = new ConsultaVendasTableModel(listaVendas);
        vendasCursojTable.setModel(modelVendas);
        TableColumnModel ColumnModel = vendasCursojTable.getColumnModel();  
        JTableRenderer renderer = new JTableRenderer();  
        ColumnModel.getColumn(0).setCellRenderer(renderer);
        vendasCursojTable.getColumnModel().getColumn(0).setPreferredWidth(60);
        vendasCursojTable.getColumnModel().getColumn(1).setPreferredWidth(200);
        vendasCursojTable.getColumnModel().getColumn(2).setPreferredWidth(100);
        vendasCursojTable.getColumnModel().getColumn(3).setPreferredWidth(200);
        vendasCursojTable.getColumnModel().getColumn(4).setPreferredWidth(200);
        vendasCursojTable.getColumnModel().getColumn(5).setPreferredWidth(100);
        vendasCursojTable.repaint();
         numeroFichasjLabel.setText("No. de Fichas : " + String.valueOf(listaVendas.size()));
    }

    @Override
    public void setModel() {
        carregarModelVendas();
    }
    
    public void excluirOrcamanto(int idVenda){
        OrcamentoController orcamentoController = new OrcamentoController();
        Orcamento orcamento = orcamentoController.consultar(idVenda);
        if (orcamento!=null){
            List<Orcamentoprodutosorcamento> listaProdutos = orcamentoController.listarOrcamentoProdutoOrcamento(orcamento.getIdorcamento());
            if (listaProdutos!=null){
                for(int i=0;i<listaProdutos.size();i++){
                    orcamentoController.excluirOrcamentoProdutoOrcamento(listaProdutos.get(i).getIdorcamentoProdutosOrcamento());
                }
            }
            orcamentoController.excluirOrcamento(orcamento.getIdorcamento());
        }
                
    }
    
    public void excluirFormaPagamento(int idVenda){
        FormaPagamentoController formaPagamentoController = new FormaPagamentoController();
        Formapagamento formapagamento = formaPagamentoController.consultar(idVenda);
        if (formapagamento!=null){
            excluirParcelamentoFormaPagamento(formapagamento.getIdformaPagamento());
            formaPagamentoController.excluir(formapagamento.getIdformaPagamento());
        }
    }
    
    public void excluirParcelamentoFormaPagamento(int idFormaPagamento){
        ParcelamentoPagamentoController parcelamentoPagamentoController = new ParcelamentoPagamentoController();
        List<Parcelamentopagamento> listaParcelamentopagamentos = parcelamentoPagamentoController.listar(idFormaPagamento);
        if (listaParcelamentopagamentos!=null){
            for(int i=0;i<listaParcelamentopagamentos.size();i++){
                parcelamentoPagamentoController.excluir(listaParcelamentopagamentos.get(i).getIdparcemlamentoPagamento());
            }
        }
    }
    
    public void excluirVistos(int idVenda){
        VistosController vistosController = new VistosController();
        Vistos visto = vistosController.consultarVistos(idVenda);
        if (visto!=null){
            vistosController.excluir(visto.getIdvistos());
        }
    }
    
    public void excluirSeguroViagem(int idVenda){
        SeguroViagemController seguroViagemController = new SeguroViagemController();
        Seguroviagem seguroviagem = seguroViagemController.consultar(idVenda);
        if (seguroviagem!=null){
            seguroViagemController.excluir(seguroviagem.getIdseguroViagem());
        }
    }
    
    public void excluirWork(int idVenda){
        WorkTravelController workTravelController = new WorkTravelController();
        Worktravel work = workTravelController.consultarWorktravel(idVenda);
        if (work!=null){
            Controlework controle = workTravelController.consultarControleWork(work.getIdworkTravel());
            if (controle!=null){
                workTravelController.excluirControleWork(controle);
            }
            workTravelController.excluir(work.getIdworkTravel());
        }
    }

    @Override
    public void setImpressao(boolean ficha, boolean contrato, boolean recibo, boolean visto) {
        if (ficha){
            imprimirFichaWork();
        }
        if (contrato){
            if (listaVendas.get(linha).getTipo().equalsIgnoreCase("Premium")){
                imprimirContratoWorkPremiun();
            }else {
                imprimirContratoWorkIndependent();
            }
            
        }   
        if (recibo){
            imprimirRecibo();
        }        
        if (visto){
            imprimirTermoVisto();
        }
    }
    public void imprimirTermoVisto() {
        int idcliente = listaVendas.get(linha).getIdcliente();
        String url = ("telas/Visto/Relatorios/termoCiencia.jasper");
        Map parameters = new HashMap();
        try {
            parameters.put("idcliente", idcliente);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Não foi possível gerar o relatório " + ex);
            ex.printStackTrace();
        }
        new relatoriosJasper(url, parameters);
    }
    public void imprimirFichaWork(){
            String url = ("telas/Work/Relatorios/FichaWorkPagina01.jasper");
            Map parameters = new HashMap();
            try {
                parameters.put("idvendas", listaVendas.get(linha).getIdVendas());
                parameters.put("SUBREPORT_DIR", "telas/Work/Relatorios/");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Não foi possível gerar o relatório " + ex);
                ex.printStackTrace();
            }
            new relatoriosJasper(url, parameters);
    }
    
    public void imprimirContratoWorkIndependent(){
            String url = ("telas/Work/Relatorios/contratoWorkIndependentPagina01.jasper");
            Map parameters = new HashMap();
            try {
                parameters.put("idvendas", listaVendas.get(linha).getIdVendas());
                parameters.put("SUBREPORT_DIR","telas/Work/Relatorios/");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Não foi possível gerar o relatório " + ex);
                ex.printStackTrace();
            }
            new relatoriosJasper(url, parameters);
    }
    
    public void imprimirContratoWorkPremiun(){
            String url = ("telas/Work/Relatorios/contratoWorkPremiumPagina01.jasper");
            Map parameters = new HashMap();
            try {
                parameters.put("idvendas", listaVendas.get(linha).getIdVendas());
                parameters.put("SUBREPORT_DIR","telas/Work/Relatorios/");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Não foi possível gerar o relatório " + ex);
                ex.printStackTrace();
            }
            new relatoriosJasper(url, parameters);
    }
    
    public void imprimirRecibo() {
        float valorRecibo = 0.0f;
        String url = ("telas/Recibo/reciboPagamento.jasper");
        FormaPagamentoController formaPagamentoController = new FormaPagamentoController();
        Formapagamento forma = formaPagamentoController.consultar(listaVendas.get(linha).getIdVendas());
        ParcelamentoPagamentoController parcelamentoPagamentoController = new ParcelamentoPagamentoController();
        List<Parcelamentopagamento> listaParcelamento = parcelamentoPagamentoController.listar(forma.getIdformaPagamento());
        if (listaParcelamento != null) {
            for (int i = 0; i < listaParcelamento.size(); i++) {
                if (listaParcelamento.get(i).getFormaPagamento().equalsIgnoreCase("Dinheiro")) {
                    valorRecibo = valorRecibo + listaParcelamento.get(i).getValorParcelamento();
                }
                if (listaParcelamento.get(i).getFormaPagamento().equalsIgnoreCase("cheque")) {
                    valorRecibo = valorRecibo + listaParcelamento.get(i).getValorParcelamento();
                }
                if (listaParcelamento.get(i).getFormaPagamento().equalsIgnoreCase("depósito")) {
                    valorRecibo = valorRecibo + listaParcelamento.get(i).getValorParcelamento();
                }
                if (listaParcelamento.get(i).getFormaPagamento().equalsIgnoreCase("Cartão de crédito")) {
                    valorRecibo = valorRecibo + listaParcelamento.get(i).getValorParcelamento();
                }
            }
        }
        if (valorRecibo > 0.0f) {
            Map parameters = new HashMap();
            try {
                parameters.put("idvendas", listaVendas.get(linha).getIdVendas());

                String valorExtenso = Formatacao.valorPorExtenso(valorRecibo);
                parameters.put("valorExtenso", valorExtenso);
                parameters.put("valorRecibo", valorRecibo);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Não foi possível gerar o relatório " + ex);
                ex.printStackTrace();
            }
            new relatoriosJasper(url, parameters);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Sem recibo para imprimir");
        }
    }

    @Override
    public void setPesquisa(Cliente cliente, Unidadenegocio unidade, Usuario usuario, Date dataInicial, Date dataFinal, String situacao) {
        String sql = null;
        sql = "Select v from Viewvendasworktravel v where ";
        boolean primeira = true;
        if (dataInicial!=null){
            sql = sql  + " v.dataVenda>='" + Formatacao.ConvercaoDataSql(dataInicial) + 
                    "' and v.dataVenda<='" + Formatacao.ConvercaoDataSql(dataFinal) + "' ";
            primeira = false;
        }
        if (cliente!=null){
            if (primeira){
                primeira = false;
                sql = sql + " v.idcliente=" + cliente.getIdcliente() + " ";
            }else {
                sql = sql + " and v.idcliente=" + cliente.getIdcliente() + " ";
            }
        }
        if (!situacao.equalsIgnoreCase("TODAS")){
            if (primeira){
                primeira= false;
                sql = sql + " v.situacao='" + situacao + "' ";
            }else {
                sql = sql + " and v.situacao='" + situacao + "' ";
            }
        }

        if (unidade!=null){
            if (primeira){
                primeira = false;
                sql = sql + " v.idunidadeNegocio=" + unidade.getIdunidadeNegocio() + " ";
            }else {
                sql = sql + " and v.idunidadeNegocio=" + unidade.getIdunidadeNegocio() + " ";
            }
        }
        if (usuario!=null){
            if (primeira){
                primeira = false;
                sql = sql + " v.idusuario=" + usuario.getIdusuario();
            }else {
                sql = sql + " and v.idusuario=" + usuario.getIdusuario();
            }
            
        }
        if (usuarioLogadoBean.getUsuario().getTipo().equalsIgnoreCase("Gerencial")){
            sql = sql + " order by v.dataVenda";
        }else {
            sql = sql + " and v.idunidadeNegocio=" + usuarioLogadoBean.getUnidadeNegocio().getIdunidadeNegocio() +  " order by v.dataVenda";
        }
        WorkTravelController workTravelController = new WorkTravelController();
        listaVendas = workTravelController.listaViewVendasWorktravel(sql);
        if (listaVendas==null){
            listaVendas = new ArrayList<Viewvendasworktravel>();
        }
        modelVendas = new ConsultaVendasTableModel(listaVendas);
        vendasCursojTable.setModel(modelVendas);
        TableColumnModel ColumnModel = vendasCursojTable.getColumnModel();  
        JTableRenderer renderer = new JTableRenderer();  
        ColumnModel.getColumn(0).setCellRenderer(renderer);
        vendasCursojTable.getColumnModel().getColumn(0).setPreferredWidth(60);
        vendasCursojTable.getColumnModel().getColumn(1).setPreferredWidth(200);
        vendasCursojTable.getColumnModel().getColumn(2).setPreferredWidth(100);
        vendasCursojTable.getColumnModel().getColumn(3).setPreferredWidth(200);
        vendasCursojTable.getColumnModel().getColumn(4).setPreferredWidth(200);
        vendasCursojTable.getColumnModel().getColumn(5).setPreferredWidth(100);
        vendasCursojTable.repaint();
         numeroFichasjLabel.setText("No. de Fichas : " + String.valueOf(listaVendas.size()));
    }
    
    public void CancelarVenda(int idVenda, String nomeCliente, String dataInicio, String motivo){
        VendasController vendasController = new VendasController();
        Vendas venda = vendasController.consultarVendas(idVenda);
        if(venda!=null){
             String tipoVenda = "";
            if (venda.getVendasMatriz().equalsIgnoreCase("S")) {
                tipoVenda = "Venda pela Matriz";
            } else {
                tipoVenda = "Venda pela Loja";
            }
             Formatacao.emitirEmailGerencial(nomeCliente, usuarioLogadoBean.getUnidadeNegocio().getNomeFantasia(), 
                usuarioLogadoBean.getUsuario().getNome(),  venda, "Ficha Cancelada", Formatacao.formatarFloatString(venda.getValor()), "I", Formatacao.formatarFloatString(listaVendas.get(linha).getValorCambio()), listaVendas.get(linha).getSigla(),
                "Sponsor",  venda.getObstm(), dataInicio, " ", tipoVenda, motivo);
            venda.setObsCancelar(motivo);
            venda.setSituacao("CANCELADA");
            venda.setDatacancelamento(new Date());
            venda.setUsuariocancelamento(usuarioLogadoBean.getUsuario().getIdusuario());
            vendasController.salvar(venda);
            WorkTravelController workTravelController = new WorkTravelController();
            List<Controlework> listaControle = workTravelController.consultarControleCursosList(venda.getIdvendas());
            if (listaControle!=null){
                for(int i=0;i<listaControle.size();i++){
                    Controlework controle = listaControle.get(i);
                    controle.setSituacao("Cancelado");
                    workTravelController.salvar(controle);
                }
            }
            carregarModelVendas();
        }
    }
}